\n// This is the core instruction set for the Gemini model.\n// It defines the persona, capabilities, and constraints of the AI agent.\nexport const SYSTEM_INSTRUCTION = `\nAs MacroMate, your core function is to be an expert nutrition and fitness coach. You will help users track their food intake and guide them in setting up and achieving their health goals.\n\nYour primary tools are:\n1.  **logFoodIntake**: To record what the user has eaten.\n2.  **updateUserGoalAndProfile**: To set up or modify the user's health profile and goals.\n\n**Conversation Flow Guidelines:**\n- **Initial Interaction**: If the user has no goal set, your first priority is to ask them if they want to create one. A good opening line is: \"Welcome! To get started, we can either log a meal you\'ve just eaten or create a personalized nutrition plan for you. What would you like to do?\"\n- **Goal Setting**: When a user wants to create a goal, you MUST gather all necessary information (age, gender, weight, height, activity level, and their desired goal like \'weight loss\'). You will then calculate their BMR and TDEE and present a recommended plan with target macros. You must then call the \`updateUserGoalAndProfile\` function to save this plan.\n- **Food Logging**: When a user wants to log food, use the \`logFoodIntake\` function. Always confirm what you have logged.\n- **Politeness**: Maintain a friendly, encouraging, and helpful tone.\n- **Clarity**: Be clear and concise in your responses.\n- **Tool Usage**: Do not call functions with missing parameters. If you need more information, ask the user for it first.\n`;\n\n// These are the function declarations that the Gemini model will use to interact with the application.\nexport const FUNCTION_DECLARATIONS = [\n  {\n    name: 'updateUserGoalAndProfile',\n    description: 'Sets or updates the user\\'s profile information (age, gender, weight, height, activity level) and their nutritional goals (e.g., weight loss, muscle gain), including calculated BMR, TDEE, and target macros.',\n    parameters: {\n      type: 'object',\n      properties: {\n        age: { type: 'number', description: 'The age of the user in years.' },\n        gender: { type: 'string', enum: ['male', 'female', 'other'], description: 'The gender of the user.' },\n        weightKg: { type: 'number', description: 'The weight of the user in kilograms.' },\n        heightCm: { type: 'number', description: 'The height of the user in centimeters.' },\n        activityLevel: { type: 'string', enum: ['sedentary', 'light', 'moderate', 'active', 'very-active'], description: 'The user\\'s typical daily activity level.' },\n        unitSystem: { type: 'string', enum: ['metric', 'imperial'], description: 'The unit system the user prefers for measurements.' },\n        goalType: { type: 'string', enum: ['weight-loss', 'weight-gain', 'maintenance', 'muscle-gain'], description: 'The user\\'s primary health and fitness goal.' },\n        grammaticalGoal: { type: 'string', description: 'A grammatically correct string describing the goal, e.g., \"Lose 1 pound per week\".' },\n        targetCalories: { type: 'number', description: 'The recommended daily calorie intake to achieve the goal.' },\n        targetProtein: { type: 'number', description: 'The recommended daily protein intake in grams.' },\n        targetCarbs: { type: 'number', description: 'The recommended daily carbohydrate intake in grams.' },\n        targetFat: { type: 'number', description: 'The recommended daily fat intake in grams.' },\n        bmr: { type: 'number', description: 'The user\\'s Basal Metabolic Rate.' },\n        tdee: { type: 'number', description: 'The user\\'s Total Daily Energy Expenditure.' },\n      },\n      required: ['age', 'gender', 'weightKg', 'heightCm', 'activityLevel', 'unitSystem', 'goalType', 'grammaticalGoal', 'targetCalories', 'targetProtein', 'targetCarbs', 'targetFat', 'bmr', 'tdee'],\n    },\n  },\n  {\n    name: 'logFoodIntake',\n    description: 'Logs a specific food item the user has consumed, including its nutritional information.',\n    parameters: {\n      type: 'object',\n      properties: {\n        foodName: { type: 'string', description: 'The name of the food item, e.g., \"Banana\" or \"Grilled Cheese Sandwich\".' },\n        calories: { type: 'number', description: 'The estimated number of calories in the food item.' },\n        protein: { type: 'number', description: 'The estimated grams of protein in the food item.' },\n        carbs: { type: 'number', description: 'The estimated grams of carbohydrates in the food item.' },\n        fat: { type: 'number', description: 'The estimated grams of fat in the food item.' },\n        category: { type: 'string', enum: ['breakfast', 'lunch', 'dinner', 'snack'], description: 'The meal category to which this food item belongs.' },\n      },\n      required: ['foodName', 'calories', 'protein', 'carbs', 'fat', 'category'],\n    },\n  },\n];\n